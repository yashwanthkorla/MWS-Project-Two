let alt_array={1:"Inside Mission Chinese Food",2:"Emily Restaurent Pizza",3:"Kang Ho Dong Baekjeong Interior with no peoples",4:"Outside view of Katz's Delicatessen",5:"Roberta's Pizza Inside view with customers",6:"Hometown BBQ Inside view",7:"Superiority Burger Main Entrance",8:"outside view of The Dutch",9:"People inside Mu Ramen",10:"Inside view of Casa Enrique"};class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(e){fetch(DBHelper.DATABASE_URL).then(e=>e.json()).then(t=>{if(window.indexedDB){let e=window.indexedDB;const n="RR_indexeddb",o="RestaurantsReviewInfo";let s=e.open(n,"1");s.onerror=(e=>{console.log(e)}),s.onupgradeneeded=(e=>{let n=e.target.result;n.createObjectStore(o,{keyPath:"id"}).transaction.oncomplete=(e=>{let s=n.transaction([o],"readwrite").objectStore(o);t.forEach(e=>{console.log(e),s.put(e).onsuccess=(e=>{console.log("Addded"+e)})})})}),console.log("Browser supports indexeddb feature")}else console.log("Browser doesnt support indexeddb faeture");e(null,t)}).catch(t=>{if(console.log(t),window.indexedDB){let t=window.indexedDB;const n="RR_indexeddb",o="RestaurantsReviewInfo";let s=t.open(n,"1");s.onerror=(e=>{console.log(e)}),s.onupgradeneeded=(t=>{let n=t.target.result;n.createObjectStore(o,{keyPath:"id"}).transaction.oncomplete=(t=>{let s=n.transaction([o],"readwrite").objectStore(o),r=s.getAll();r.onsuccess=(()=>{e(null,r.result)}),console.log(s.getAll())})}),console.log("Browser supports indexeddb feature")}else console.log("Browser doesnt support indexeddb faeture")})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((n,o)=>{if(n)t(n,null);else{const n=o.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,o)=>{if(n)t(n,null);else{const n=o.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,o)=>{if(n)t(n,null);else{const n=o.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((o,s)=>{if(o)n(o,null);else{let o=s;"all"!=e&&(o=o.filter(t=>t.cuisine_type==e)),"all"!=t&&(o=o.filter(e=>e.neighborhood==t)),n(null,o)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),o=t.filter((e,n)=>t.indexOf(e)==n);e(null,o)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),o=t.filter((e,n)=>t.indexOf(e)==n);e(null,o)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return null==e.photograph?"/Main/opt_webp/noimage.webp":`/Main/opt_webp/${e.photograph}.webp`}static mapMarkerForRestaurant(e,t){const n=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return n.addTo(newMap),n}}